<?xml version="1.0" encoding="UTF-8"?>
<ttFont sfntVersion="\x00\x01\x00\x00" ttLibVersion="4.39">

  <GlyphOrder>
    <!-- The 'id' attribute is only for humans; it is ignored when parsed. -->
    <GlyphID id="0" name=".notdef"/>
    <GlyphID id="1" name="space"/>
    <GlyphID id="2" name="e"/>
  </GlyphOrder>

  <head>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="1.0"/>
    <fontRevision value="2.00499"/>
    <checkSumAdjustment value="0x61cbbe4b"/>
    <magicNumber value="0x5f0f3cf5"/>
    <flags value="00100000 00001111"/>
    <unitsPerEm value="2048"/>
    <created value="Tue Feb 28 10:54:35 2023"/>
    <modified value="Wed Mar 22 15:18:08 2023"/>
    <xMin value="169"/>
    <yMin value="-300"/>
    <xMax value="823"/>
    <yMax value="1520"/>
    <macStyle value="00000000 00000000"/>
    <lowestRecPPEM value="7"/>
    <fontDirectionHint value="2"/>
    <indexToLocFormat value="0"/>
    <glyphDataFormat value="0"/>
  </head>

  <hhea>
    <tableVersion value="0x00010000"/>
    <ascent value="1891"/>
    <descent value="-605"/>
    <lineGap value="0"/>
    <advanceWidthMax value="1061"/>
    <minLeftSideBearing value="169"/>
    <minRightSideBearing value="164"/>
    <xMaxExtent value="823"/>
    <caretSlopeRise value="1"/>
    <caretSlopeRun value="0"/>
    <caretOffset value="0"/>
    <reserved0 value="0"/>
    <reserved1 value="0"/>
    <reserved2 value="0"/>
    <reserved3 value="0"/>
    <metricDataFormat value="0"/>
    <numberOfHMetrics value="3"/>
  </hhea>

  <maxp>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="0x10000"/>
    <numGlyphs value="3"/>
    <maxPoints value="73"/>
    <maxContours value="10"/>
    <maxCompositePoints value="0"/>
    <maxCompositeContours value="0"/>
    <maxZones value="2"/>
    <maxTwilightPoints value="2"/>
    <maxStorage value="22"/>
    <maxFunctionDefs value="6"/>
    <maxInstructionDefs value="0"/>
    <maxStackElements value="100"/>
    <maxSizeOfInstructions value="36"/>
    <maxComponentElements value="0"/>
    <maxComponentDepth value="0"/>
  </maxp>

  <OS_2>
    <!-- The fields 'usFirstCharIndex' and 'usLastCharIndex'
         will be recalculated by the compiler -->
    <version value="4"/>
    <xAvgCharWidth value="843"/>
    <usWeightClass value="100"/>
    <usWidthClass value="5"/>
    <fsType value="00000000 00001000"/>
    <ySubscriptXSize value="1330"/>
    <ySubscriptYSize value="1230"/>
    <ySubscriptXOffset value="0"/>
    <ySubscriptYOffset value="155"/>
    <ySuperscriptXSize value="1330"/>
    <ySuperscriptYSize value="1230"/>
    <ySuperscriptXOffset value="0"/>
    <ySuperscriptYOffset value="715"/>
    <yStrikeoutSize value="100"/>
    <yStrikeoutPosition value="520"/>
    <sFamilyClass value="0"/>
    <panose>
      <bFamilyType value="0"/>
      <bSerifStyle value="0"/>
      <bWeight value="0"/>
      <bProportion value="0"/>
      <bContrast value="0"/>
      <bStrokeVariation value="0"/>
      <bArmStyle value="0"/>
      <bLetterForm value="0"/>
      <bMidline value="0"/>
      <bXHeight value="0"/>
    </panose>
    <ulUnicodeRange1 value="00000000 00000000 00000000 00000011"/>
    <ulUnicodeRange2 value="00000000 00000000 00000000 00000000"/>
    <ulUnicodeRange3 value="00000000 00000000 00000000 00000000"/>
    <ulUnicodeRange4 value="00000000 00000000 00000000 00000000"/>
    <achVendID value="JENS"/>
    <fsSelection value="00000000 11000000"/>
    <usFirstCharIndex value="32"/>
    <usLastCharIndex value="160"/>
    <sTypoAscender value="1512"/>
    <sTypoDescender value="-453"/>
    <sTypoLineGap value="529"/>
    <usWinAscent value="1891"/>
    <usWinDescent value="605"/>
    <ulCodePageRange1 value="00000000 00000000 00000000 00000001"/>
    <ulCodePageRange2 value="00000000 00000000 00000000 00000000"/>
    <sxHeight value="1040"/>
    <sCapHeight value="1362"/>
    <usDefaultChar value="0"/>
    <usBreakChar value="32"/>
    <usMaxContext value="2"/>
  </OS_2>

  <hmtx>
    <mtx name=".notdef" width="910" lsb="169"/>
    <mtx name="e" width="1061" lsb="172"/>
    <mtx name="space" width="560" lsb="0"/>
  </hmtx>

  <cmap>
    <tableVersion version="0"/>
    <cmap_format_4 platformID="0" platEncID="3" language="0">
      <map code="0x20" name="space"/><!-- SPACE -->
      <map code="0x65" name="e"/><!-- LATIN SMALL LETTER E -->
      <map code="0xa0" name="space"/><!-- NO-BREAK SPACE -->
    </cmap_format_4>
    <cmap_format_4 platformID="3" platEncID="1" language="0">
      <map code="0x20" name="space"/><!-- SPACE -->
      <map code="0x65" name="e"/><!-- LATIN SMALL LETTER E -->
      <map code="0xa0" name="space"/><!-- NO-BREAK SPACE -->
    </cmap_format_4>
  </cmap>

  <fpgm>
    <assembly>
      PUSHB[ ]	/* 1 value pushed */
      0
      FDEF[ ]	/* FunctionDefinition */
        NPUSHB[ ]	/* 14 values pushed */
        5 6 7 13 6 9 20 14 19 11 18 8 17 16
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP2[ ]	/* SetZonePointer2 */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        9
        RS[ ]	/* ReadStore */
        GC[0]	/* GetCoordOnPVector */
        SUB[ ]	/* Subtract */
        ABS[ ]	/* Absolute */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        RCVT[ ]	/* ReadCVT */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        RCVT[ ]	/* ReadCVT */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        RCVT[ ]	/* ReadCVT */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        12
        RS[ ]	/* ReadStore */
        GC[0]	/* GetCoordOnPVector */
        SUB[ ]	/* Subtract */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        18
        RS[ ]	/* ReadStore */
        SUB[ ]	/* Subtract */
        ROUND[01]	/* Round */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        16
        RS[ ]	/* ReadStore */
        GC[0]	/* GetCoordOnPVector */
        SUB[ ]	/* Subtract */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        20
        RS[ ]	/* ReadStore */
        SUB[ ]	/* Subtract */
        ROUND[01]	/* Round */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        64
        LT[ ]	/* LessThan */
        JROF[ ]	/* JumpRelativeOnFalse */
        PUSHB[ ]	/* 2 values pushed */
        6 64
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 2 values pushed */
        5 7
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        64
        LT[ ]	/* LessThan */
        JROF[ ]	/* JumpRelativeOnFalse */
        PUSHB[ ]	/* 2 values pushed */
        7 64
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 4 values pushed */
        16 5 5 18
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        19
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        20
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        6
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        7
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        32
        SUB[ ]	/* Subtract */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        17
        RS[ ]	/* ReadStore */
        GT[ ]	/* GreaterThan */
        PUSHB[ ]	/* 1 value pushed */
        7
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        70
        GT[ ]	/* GreaterThan */
        AND[ ]	/* LogicalAnd */
        JROF[ ]	/* JumpRelativeOnFalse */
        PUSHB[ ]	/* 4 values pushed */
        5 5 7 7
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        64
        SUB[ ]	/* Subtract */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        64
        SUB[ ]	/* Subtract */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 2 values pushed */
        16 5
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        17
        RS[ ]	/* ReadStore */
        GT[ ]	/* GreaterThan */
        PUSHB[ ]	/* 1 value pushed */
        6
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        70
        GT[ ]	/* GreaterThan */
        AND[ ]	/* LogicalAnd */
        JROF[ ]	/* JumpRelativeOnFalse */
        PUSHB[ ]	/* 4 values pushed */
        5 5 6 6
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        64
        SUB[ ]	/* Subtract */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        64
        SUB[ ]	/* Subtract */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 2 values pushed */
        9 5
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        17
        RS[ ]	/* ReadStore */
        GT[ ]	/* GreaterThan */
        PUSHB[ ]	/* 1 value pushed */
        18
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        70
        GT[ ]	/* GreaterThan */
        AND[ ]	/* LogicalAnd */
        JROF[ ]	/* JumpRelativeOnFalse */
        PUSHB[ ]	/* 2 values pushed */
        18 18
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        64
        SUB[ ]	/* Subtract */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 2 values pushed */
        8 5
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        17
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        64
        SUB[ ]	/* Subtract */
        LT[ ]	/* LessThan */
        JROF[ ]	/* JumpRelativeOnFalse */
        PUSHB[ ]	/* 3 values pushed */
        6 64 6
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 4 values pushed */
        13 15 12 10
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        18
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 3 values pushed */
        1 1 9
        RS[ ]	/* ReadStore */
        SRP0[ ]	/* SetRefPoint0 */
        SZP1[ ]	/* SetZonePointer1 */
        SZP0[ ]	/* SetZonePointer0 */
        MSIRP[0]	/* MoveStackIndirRelPt */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        6
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        10
        RS[ ]	/* ReadStore */
        SRP0[ ]	/* SetRefPoint0 */
        MSIRP[0]	/* MoveStackIndirRelPt */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        20
        RS[ ]	/* ReadStore */
        NEG[ ]	/* Negate */
        PUSHB[ ]	/* 1 value pushed */
        16
        RS[ ]	/* ReadStore */
        SRP0[ ]	/* SetRefPoint0 */
        MSIRP[0]	/* MoveStackIndirRelPt */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        7
        RS[ ]	/* ReadStore */
        NEG[ ]	/* Negate */
        PUSHB[ ]	/* 1 value pushed */
        15
        RS[ ]	/* ReadStore */
        SRP0[ ]	/* SetRefPoint0 */
        MSIRP[0]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      1
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 7 values pushed */
        3 0 4 1 0 0 2
        RS[ ]	/* ReadStore */
        WCVTF[ ]	/* WriteCVTInFUnits */
        RCVT[ ]	/* ReadCVT */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        RCVT[ ]	/* ReadCVT */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        0
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        1
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP2[ ]	/* SetZonePointer2 */
        SCFS[ ]	/* SetCoordFromStackFP */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      2
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 5 values pushed */
        10 8 8 4 5
        RS[ ]	/* ReadStore */
        RCVT[ ]	/* ReadCVT */
        WS[ ]	/* WriteStore */
        MPPEM[ ]	/* MeasurePixelPerEm */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        16
        LT[ ]	/* LessThan */
        JROF[ ]	/* JumpRelativeOnFalse */
        PUSHB[ ]	/* 2 values pushed */
        4 4
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        9
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        WS[ ]	/* WriteStore */
        NPUSHB[ ]	/* 9 values pushed */
        8 3 5 5 1 5 5 7 4
        RS[ ]	/* ReadStore */
        ROUND[01]	/* Round */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        7
        RS[ ]	/* ReadStore */
        WCVTP[ ]	/* WriteCVTInPixels */
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        RCVT[ ]	/* ReadCVT */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        10
        RS[ ]	/* ReadStore */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 2 values pushed */
          6 7
          RS[ ]	/* ReadStore */
          PUSHB[ ]	/* 1 value pushed */
          3
          RS[ ]	/* ReadStore */
          PUSHB[ ]	/* 1 value pushed */
          4
          RS[ ]	/* ReadStore */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          1
          RS[ ]	/* ReadStore */
          MUL[ ]	/* Multiply */
          ROUND[00]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          1
          RS[ ]	/* ReadStore */
          DIV[ ]	/* Divide */
          ADD[ ]	/* Add */
          WS[ ]	/* WriteStore */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 2 values pushed */
          6 7
          RS[ ]	/* ReadStore */
          WS[ ]	/* WriteStore */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        5
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        6
        RS[ ]	/* ReadStore */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      3
      FDEF[ ]	/* FunctionDefinition */
        NPUSHB[ ]	/* 19 values pushed */
        17 6 6 0 2 2 1 2 2 4 10 10 8 9 0 0 5 1 2
        RS[ ]	/* ReadStore */
        RCVT[ ]	/* ReadCVT */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        WCVTF[ ]	/* WriteCVTInFUnits */
        RCVT[ ]	/* ReadCVT */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        RCVT[ ]	/* ReadCVT */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        1
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        9
        RS[ ]	/* ReadStore */
        SUB[ ]	/* Subtract */
        ROUND[10]	/* Round */
        ADD[ ]	/* Add */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        4
        RS[ ]	/* ReadStore */
        WCVTP[ ]	/* WriteCVTInPixels */
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        RCVT[ ]	/* ReadCVT */
        WS[ ]	/* WriteStore */
        MPPEM[ ]	/* MeasurePixelPerEm */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        7
        RS[ ]	/* ReadStore */
        GT[ ]	/* GreaterThan */
        JROF[ ]	/* JumpRelativeOnFalse */
        PUSHB[ ]	/* 3 values pushed */
        6 3 4
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        0
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        1
        RS[ ]	/* ReadStore */
        SUB[ ]	/* Subtract */
        ROUND[10]	/* Round */
        ADD[ ]	/* Add */
        WS[ ]	/* WriteStore */
        JMPR[ ]	/* Jump */
        PUSHB[ ]	/* 2 values pushed */
        3 4
        RS[ ]	/* ReadStore */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        3
        RS[ ]	/* ReadStore */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      4
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        8 64 1
        RCVT[ ]	/* ReadCVT */
        EQ[ ]	/* Equal */
        JROF[ ]	/* JumpRelativeOnFalse */
        RTG[ ]	/* RoundToGrid */
        PUSHB[ ]	/* 2 values pushed */
        5 7
        RS[ ]	/* ReadStore */
        MDAP[1]	/* MoveDirectAbsPt */
        JMPR[ ]	/* Jump */
        PUSHB[ ]	/* 1 value pushed */
        7
        RS[ ]	/* ReadStore */
        MDAP[0]	/* MoveDirectAbsPt */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      5
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        5
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        8
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        NPUSHB[ ]	/* 14 values pushed */
        65 8 6 1 1 7 7 5 3 0 0 4 4 2
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP2[ ]	/* SetZonePointer2 */
        GC[0]	/* GetCoordOnPVector */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        ROUND[01]	/* Round */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        4
        RS[ ]	/* ReadStore */
        SUB[ ]	/* Subtract */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        GC[0]	/* GetCoordOnPVector */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        ROUND[01]	/* Round */
        ROFF[ ]	/* RoundOff */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        7
        RS[ ]	/* ReadStore */
        SUB[ ]	/* Subtract */
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        0
        GT[ ]	/* GreaterThan */
        JROF[ ]	/* JumpRelativeOnFalse */
        PUSHB[ ]	/* 2 values pushed */
        27 3
        RS[ ]	/* ReadStore */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        6
        RS[ ]	/* ReadStore */
        ABS[ ]	/* Absolute */
        LT[ ]	/* LessThan */
        JROF[ ]	/* JumpRelativeOnFalse */
        PUSHB[ ]	/* 3 values pushed */
        25 5 2
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        0
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP2[ ]	/* SetZonePointer2 */
        SCFS[ ]	/* SetCoordFromStackFP */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        8
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 3 values pushed */
        1 1 2
        RS[ ]	/* ReadStore */
        SRP0[ ]	/* SetRefPoint0 */
        SZP1[ ]	/* SetZonePointer1 */
        SZP0[ ]	/* SetZonePointer0 */
        MIRP[01101]	/* MoveIndirectRelPt */
        JMPR[ ]	/* Jump */
        PUSHB[ ]	/* 2 values pushed */
        2 5
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        1
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP2[ ]	/* SetZonePointer2 */
        SCFS[ ]	/* SetCoordFromStackFP */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        8
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 3 values pushed */
        1 1 5
        RS[ ]	/* ReadStore */
        SRP0[ ]	/* SetRefPoint0 */
        SZP1[ ]	/* SetZonePointer1 */
        SZP0[ ]	/* SetZonePointer0 */
        MIRP[01101]	/* MoveIndirectRelPt */
        PUSHB[ ]	/* 1 value pushed */
        54
        JMPR[ ]	/* Jump */
        PUSHB[ ]	/* 2 values pushed */
        23 3
        RS[ ]	/* ReadStore */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        6
        RS[ ]	/* ReadStore */
        ABS[ ]	/* Absolute */
        LT[ ]	/* LessThan */
        JROF[ ]	/* JumpRelativeOnFalse */
        PUSHB[ ]	/* 3 values pushed */
        21 5 2
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        0
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP2[ ]	/* SetZonePointer2 */
        SCFS[ ]	/* SetCoordFromStackFP */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        7
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        3
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        SCFS[ ]	/* SetCoordFromStackFP */
        JMPR[ ]	/* Jump */
        PUSHB[ ]	/* 2 values pushed */
        2 5
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        1
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP2[ ]	/* SetZonePointer2 */
        SCFS[ ]	/* SetCoordFromStackFP */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        4
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        6
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        SCFS[ ]	/* SetCoordFromStackFP */
      ENDF[ ]	/* EndFunctionDefinition */
    </assembly>
  </fpgm>

  <prep>
    <assembly>
      SVTCA[0]	/* SetFPVectorToAxis */
      PUSHB[ ]	/* 6 values pushed */
      7 2 2 1 1 64
      WS[ ]	/* WriteStore */
      GETINFO[ ]	/* GetInfo */
      WS[ ]	/* WriteStore */
      RS[ ]	/* ReadStore */
      PUSHB[ ]	/* 1 value pushed */
      38
      GTEQ[ ]	/* GreaterThanOrEqual */
      PUSHB[ ]	/* 1 value pushed */
      2
      RS[ ]	/* ReadStore */
      PUSHB[ ]	/* 1 value pushed */
      64
      LTEQ[ ]	/* LessThenOrEqual */
      AND[ ]	/* LogicalAnd */
      JROF[ ]	/* JumpRelativeOnFalse */
      PUSHB[ ]	/* 1 value pushed */
      1
      PUSHW[ ]	/* 1 value pushed */
      256
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 7 values pushed */
      54 64 1 5 15 1 1
      RS[ ]	/* ReadStore */
      WCVTP[ ]	/* WriteCVTInPixels */
      WS[ ]	/* WriteStore */
      RS[ ]	/* ReadStore */
      EQ[ ]	/* Equal */
      JROF[ ]	/* JumpRelativeOnFalse */
      PUSHB[ ]	/* 2 values pushed */
      46 5
      RS[ ]	/* ReadStore */
      PUSHB[ ]	/* 1 value pushed */
      17
      LT[ ]	/* LessThan */
      JROF[ ]	/* JumpRelativeOnFalse */
      PUSHB[ ]	/* 4 values pushed */
      7 9 9 5
      RS[ ]	/* ReadStore */
      RCVT[ ]	/* ReadCVT */
      WS[ ]	/* WriteStore */
      RS[ ]	/* ReadStore */
      PUSHB[ ]	/* 1 value pushed */
      93
      LT[ ]	/* LessThan */
      JROF[ ]	/* JumpRelativeOnFalse */
      PUSHB[ ]	/* 3 values pushed */
      10 9 64
      WS[ ]	/* WriteStore */
      JMPR[ ]	/* Jump */
      PUSHB[ ]	/* 2 values pushed */
      9 9
      RS[ ]	/* ReadStore */
      PUSHB[ ]	/* 1 value pushed */
      6
      SUB[ ]	/* Subtract */
      ROUND[01]	/* Round */
      WS[ ]	/* WriteStore */
      PUSHW[ ]	/* 1 value pushed */
      -52
      PUSHB[ ]	/* 4 values pushed */
      5 1 5 5
      RS[ ]	/* ReadStore */
      PUSHB[ ]	/* 1 value pushed */
      9
      RS[ ]	/* ReadStore */
      WCVTP[ ]	/* WriteCVTInPixels */
      RS[ ]	/* ReadStore */
      ADD[ ]	/* Add */
      WS[ ]	/* WriteStore */
      JMPR[ ]	/* Jump */
      PUSHB[ ]	/* 2 values pushed */
      44 1
      RS[ ]	/* ReadStore */
      PUSHB[ ]	/* 1 value pushed */
      64
      GT[ ]	/* GreaterThan */
      JROF[ ]	/* JumpRelativeOnFalse */
      PUSHB[ ]	/* 2 values pushed */
      36 5
      RS[ ]	/* ReadStore */
      PUSHB[ ]	/* 1 value pushed */
      17
      LT[ ]	/* LessThan */
      JROF[ ]	/* JumpRelativeOnFalse */
      PUSHW[ ]	/* 1 value pushed */
      -42
      PUSHB[ ]	/* 8 values pushed */
      5 1 5 5 10 10 10 5
      RS[ ]	/* ReadStore */
      RCVT[ ]	/* ReadCVT */
      WS[ ]	/* WriteStore */
      RS[ ]	/* ReadStore */
      PUSHB[ ]	/* 1 value pushed */
      1
      RS[ ]	/* ReadStore */
      MUL[ ]	/* Multiply */
      ROUND[01]	/* Round */
      PUSHB[ ]	/* 1 value pushed */
      1
      RS[ ]	/* ReadStore */
      DIV[ ]	/* Divide */
      WS[ ]	/* WriteStore */
      RS[ ]	/* ReadStore */
      PUSHB[ ]	/* 1 value pushed */
      10
      RS[ ]	/* ReadStore */
      WCVTP[ ]	/* WriteCVTInPixels */
      RS[ ]	/* ReadStore */
      ADD[ ]	/* Add */
      WS[ ]	/* WriteStore */
      JMPR[ ]	/* Jump */
      PUSHB[ ]	/* 7 values pushed */
      2 9 6 10 40 5 2
      WS[ ]	/* WriteStore */
      WS[ ]	/* WriteStore */
      WS[ ]	/* WriteStore */
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 7 values pushed */
      2 9 6 10 40 5 4
      WS[ ]	/* WriteStore */
      WS[ ]	/* WriteStore */
      WS[ ]	/* WriteStore */
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 7 values pushed */
      2 9 6 10 40 5 6
      WS[ ]	/* WriteStore */
      WS[ ]	/* WriteStore */
      WS[ ]	/* WriteStore */
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 7 values pushed */
      2 9 12 10 40 5 8
      WS[ ]	/* WriteStore */
      WS[ ]	/* WriteStore */
      WS[ ]	/* WriteStore */
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 7 values pushed */
      2 9 0 10 40 5 10
      WS[ ]	/* WriteStore */
      WS[ ]	/* WriteStore */
      WS[ ]	/* WriteStore */
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 7 values pushed */
      2 9 0 10 40 5 12
      WS[ ]	/* WriteStore */
      WS[ ]	/* WriteStore */
      WS[ ]	/* WriteStore */
      CALL[ ]	/* CallFunction */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHW[ ]	/* 1 value pushed */
      4096
      MUL[ ]	/* Multiply */
      NEG[ ]	/* Negate */
      PUSHW[ ]	/* 1 value pushed */
      15000
      ADD[ ]	/* Add */
      PUSHW[ ]	/* 1 value pushed */
      6400
      DIV[ ]	/* Divide */
      PUSHB[ ]	/* 1 value pushed */
      10
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 2 values pushed */
      0 10
      RS[ ]	/* ReadStore */
      GT[ ]	/* GreaterThan */
      IF[ ]	/* If */
        PUSHB[ ]	/* 1 value pushed */
        0
      ELSE[ ]	/* Else */
        PUSHB[ ]	/* 1 value pushed */
        10
        RS[ ]	/* ReadStore */
      EIF[ ]	/* EndIf */
      SCVTCI[ ]	/* SetCVTCutIn */
      PUSHB[ ]	/* 1 value pushed */
      13
      SMD[ ]	/* SetMinimumDistance */
    </assembly>
  </prep>

  <cvt>
    <cv index="0" value="0"/>
    <cv index="1" value="0"/>
    <cv index="2" value="1513"/>
    <cv index="3" value="1539"/>
    <cv index="4" value="1362"/>
    <cv index="5" value="1388"/>
    <cv index="6" value="1210"/>
    <cv index="7" value="1237"/>
    <cv index="8" value="1059"/>
    <cv index="9" value="1085"/>
    <cv index="10" value="0"/>
    <cv index="11" value="-26"/>
    <cv index="12" value="-303"/>
    <cv index="13" value="-333"/>
    <cv index="14" value="0"/>
    <cv index="15" value="4"/>
    <cv index="16" value="4"/>
    <cv index="17" value="0"/>
  </cvt>

  <loca>
    <!-- The 'loca' table will be calculated by the compiler -->
  </loca>

  <glyf>

    <!-- The xMin, yMin, xMax and yMax values
         will be recalculated by the compiler. -->

    <TTGlyph name=".notdef" xMin="169" yMin="-300" xMax="746" yMax="1520">
      <contour>
        <pt x="746" y="-300" on="1"/>
        <pt x="169" y="-300" on="1"/>
        <pt x="169" y="1520" on="1"/>
        <pt x="746" y="1520" on="1"/>
      </contour>
      <contour>
        <pt x="304" y="279" on="1"/>
        <pt x="304" y="73" on="1"/>
        <pt x="606" y="73" on="1"/>
        <pt x="606" y="279" on="1"/>
      </contour>
      <contour>
        <pt x="546" y="133" on="1"/>
        <pt x="364" y="133" on="1"/>
        <pt x="364" y="219" on="1"/>
        <pt x="546" y="219" on="1"/>
      </contour>
      <contour>
        <pt x="424" y="594" on="1"/>
        <pt x="424" y="492" on="1"/>
        <pt x="486" y="492" on="1"/>
        <pt x="486" y="534" on="1"/>
        <pt x="546" y="534" on="1"/>
        <pt x="546" y="448" on="1"/>
        <pt x="364" y="448" on="1"/>
        <pt x="364" y="594" on="1"/>
        <pt x="304" y="594" on="1"/>
        <pt x="304" y="388" on="1"/>
        <pt x="606" y="388" on="1"/>
        <pt x="606" y="594" on="1"/>
      </contour>
      <contour>
        <pt x="546" y="816" on="1"/>
        <pt x="546" y="696" on="1"/>
        <pt x="304" y="696" on="1"/>
        <pt x="304" y="634" on="1"/>
        <pt x="606" y="634" on="1"/>
        <pt x="606" y="816" on="1"/>
      </contour>
      <contour>
        <pt x="304" y="925" on="1"/>
        <pt x="304" y="865" on="1"/>
        <pt x="424" y="865" on="1"/>
        <pt x="424" y="797" on="1"/>
        <pt x="304" y="797" on="1"/>
        <pt x="304" y="737" on="1"/>
        <pt x="486" y="737" on="1"/>
        <pt x="486" y="865" on="1"/>
        <pt x="606" y="865" on="1"/>
        <pt x="606" y="925" on="1"/>
      </contour>
      <contour>
        <pt x="424" y="1036" on="1"/>
        <pt x="364" y="1036" on="1"/>
        <pt x="364" y="1101" on="1"/>
        <pt x="424" y="1101" on="1"/>
      </contour>
      <contour>
        <pt x="304" y="1163" on="1"/>
        <pt x="304" y="974" on="1"/>
        <pt x="606" y="974" on="1"/>
        <pt x="606" y="1036" on="1"/>
        <pt x="486" y="1036" on="1"/>
        <pt x="486" y="1163" on="1"/>
      </contour>
      <contour>
        <pt x="306" y="1398" on="1"/>
        <pt x="306" y="1338" on="1"/>
        <pt x="424" y="1338" on="1"/>
        <pt x="424" y="1271" on="1"/>
        <pt x="304" y="1271" on="1"/>
        <pt x="304" y="1211" on="1"/>
        <pt x="606" y="1211" on="1"/>
        <pt x="606" y="1271" on="1"/>
        <pt x="486" y="1271" on="1"/>
        <pt x="486" y="1338" on="1"/>
        <pt x="606" y="1338" on="1"/>
        <pt x="606" y="1398" on="1"/>
      </contour>
      <contour>
        <pt x="304" y="31" on="1"/>
        <pt x="304" y="-29" on="1"/>
        <pt x="431" y="-29" on="1"/>
        <pt x="304" y="-114" on="1"/>
        <pt x="304" y="-174" on="1"/>
        <pt x="606" y="-174" on="1"/>
        <pt x="606" y="-114" on="1"/>
        <pt x="420" y="-114" on="1"/>
        <pt x="548" y="-29" on="1"/>
        <pt x="606" y="-29" on="1"/>
        <pt x="606" y="31" on="1"/>
      </contour>
      <instructions/>
    </TTGlyph>

    <TTGlyph name="e" xMin="172" yMin="-19" xMax="823" yMax="1055">
      <contour>
        <pt x="373" y="-19" on="0"/>
        <pt x="172" y="258" on="0"/>
        <pt x="172" y="520" on="1"/>
        <pt x="172" y="686" on="0"/>
        <pt x="256" y="927" on="0"/>
        <pt x="415" y="1055" on="0"/>
        <pt x="524" y="1055" on="1"/>
        <pt x="617" y="1055" on="0"/>
        <pt x="751" y="964" on="0"/>
        <pt x="823" y="795" on="0"/>
        <pt x="823" y="681" on="1"/>
        <pt x="823" y="632" on="0"/>
        <pt x="815" y="571" on="1"/>
        <pt x="177" y="571" on="1"/>
        <pt x="176" y="554" on="0"/>
        <pt x="176" y="520" on="1"/>
        <pt x="176" y="259" on="0"/>
        <pt x="375" y="-15" on="0"/>
        <pt x="564" y="-15" on="1"/>
        <pt x="619" y="-15" on="0"/>
        <pt x="740" y="19" on="0"/>
        <pt x="800" y="51" on="1"/>
        <pt x="802" y="47" on="1"/>
        <pt x="674" y="-19" on="0"/>
        <pt x="564" y="-19" on="1"/>
      </contour>
      <contour>
        <pt x="812" y="575" on="1"/>
        <pt x="819" y="627" on="0"/>
        <pt x="819" y="681" on="1"/>
        <pt x="819" y="795" on="0"/>
        <pt x="749" y="961" on="0"/>
        <pt x="616" y="1051" on="0"/>
        <pt x="524" y="1051" on="1"/>
        <pt x="422" y="1051" on="0"/>
        <pt x="270" y="938" on="0"/>
        <pt x="184" y="724" on="0"/>
        <pt x="177" y="575" on="1"/>
      </contour>
      <instructions>
        <assembly>
          SVTCA[0]	/* SetFPVectorToAxis */
          ROFF[ ]	/* RoundOff */
          PUSHB[ ]	/* 5 values pushed */
          31 15 4 7 6
          WS[ ]	/* WriteStore */
          CALL[ ]	/* CallFunction */
          MIRP[01001]	/* MoveIndirectRelPt */
          ROFF[ ]	/* RoundOff */
          PUSHB[ ]	/* 4 values pushed */
          18 15 24 11
          MIAP[0]	/* MoveIndirectAbsPt */
          MIRP[01001]	/* MoveIndirectRelPt */
          PUSHB[ ]	/* 3 values pushed */
          12 24 6
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          PUSHB[ ]	/* 1 value pushed */
          12
          MDAP[1]	/* MoveDirectAbsPt */
          ROFF[ ]	/* RoundOff */
          PUSHB[ ]	/* 2 values pushed */
          25 15
          MIRP[01001]	/* MoveIndirectRelPt */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="space"/><!-- contains no outline data -->

  </glyf>

  <name>
    <namerecord nameID="0" platformID="3" platEncID="1" langID="0x409">
      Copyright 2017-2023 by Jens Kutilek
    </namerecord>
    <namerecord nameID="1" platformID="3" platEncID="1" langID="0x409">
      Conta Thin
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x409">
      Regular
    </namerecord>
    <namerecord nameID="3" platformID="3" platEncID="1" langID="0x409">
      2.005;JENS;Conta-Thin
    </namerecord>
    <namerecord nameID="4" platformID="3" platEncID="1" langID="0x409">
      Conta Thin
    </namerecord>
    <namerecord nameID="5" platformID="3" platEncID="1" langID="0x409">
      Version 2.005
    </namerecord>
    <namerecord nameID="6" platformID="3" platEncID="1" langID="0x409">
      Conta-Thin
    </namerecord>
    <namerecord nameID="8" platformID="3" platEncID="1" langID="0x409">
      Jens Kutilek
    </namerecord>
    <namerecord nameID="9" platformID="3" platEncID="1" langID="0x409">
      Jens Kutilek
    </namerecord>
    <namerecord nameID="10" platformID="3" platEncID="1" langID="0x409">
      conta (f) - Portuguese

From Old Portuguese conta, from Latin computō (“I calculate”).

1. (mathematics) operation, calculation
2. (mathematics) equation
3. account (in a bank or computer)
4. bead (small round object, especially those of a rosary)
5. check (a bill, particularly at a restaurant)
    </namerecord>
    <namerecord nameID="11" platformID="3" platEncID="1" langID="0x409">
      https://www.kutilek.de/
    </namerecord>
    <namerecord nameID="12" platformID="3" platEncID="1" langID="0x409">
      https://www.kutilek.de/
    </namerecord>
    <namerecord nameID="13" platformID="3" platEncID="1" langID="0x409">
      SIL Open Font License
    </namerecord>
    <namerecord nameID="14" platformID="3" platEncID="1" langID="0x409">
      https://scripts.sil.org/OFL
    </namerecord>
    <namerecord nameID="16" platformID="3" platEncID="1" langID="0x409">
      Conta
    </namerecord>
    <namerecord nameID="17" platformID="3" platEncID="1" langID="0x409">
      Thin
    </namerecord>
  </name>

  <post>
    <formatType value="2.0"/>
    <italicAngle value="0.0"/>
    <underlinePosition value="-205"/>
    <underlineThickness value="100"/>
    <isFixedPitch value="0"/>
    <minMemType42 value="0"/>
    <maxMemType42 value="0"/>
    <minMemType1 value="0"/>
    <maxMemType1 value="0"/>
    <psNames>
      <!-- This file uses unique glyph names based on the information
           found in the 'post' table. Since these names might not be unique,
           we have to invent artificial names in case of clashes. In order to
           be able to retain the original information, we need a name to
           ps name mapping for those cases where they differ. That's what
           you see below.
            -->
    </psNames>
    <extraNames>
      <!-- following are the name that are not taken from the standard Mac glyph order -->
    </extraNames>
  </post>

  <gasp>
    <gaspRange rangeMaxPPEM="8" rangeGaspBehavior="10"/>
    <gaspRange rangeMaxPPEM="96" rangeGaspBehavior="15"/>
    <gaspRange rangeMaxPPEM="65535" rangeGaspBehavior="10"/>
  </gasp>

  <GPOS>
    <Version value="0x00010000"/>
    <ScriptList>
      <!-- ScriptCount=1 -->
      <ScriptRecord index="0">
        <ScriptTag value="DFLT"/>
        <Script>
          <DefaultLangSys>
            <ReqFeatureIndex value="65535"/>
            <!-- FeatureCount=1 -->
            <FeatureIndex index="0" value="0"/>
          </DefaultLangSys>
          <!-- LangSysCount=0 -->
        </Script>
      </ScriptRecord>
    </ScriptList>
    <FeatureList>
      <!-- FeatureCount=1 -->
      <FeatureRecord index="0">
        <FeatureTag value="kern"/>
        <Feature>
          <!-- LookupCount=1 -->
          <LookupListIndex index="0" value="0"/>
        </Feature>
      </FeatureRecord>
    </FeatureList>
    <LookupList>
      <!-- LookupCount=1 -->
      <Lookup index="0">
        <LookupType value="2"/>
        <LookupFlag value="8"/><!-- ignoreMarks -->
        <!-- SubTableCount=1 -->
        <PairPos index="0" Format="2">
          <Coverage>
            <Glyph value="e"/>
          </Coverage>
          <ValueFormat1 value="4"/>
          <ValueFormat2 value="0"/>
          <ClassDef1>
          </ClassDef1>
          <ClassDef2>
            <ClassDef glyph="e" class="1"/>
          </ClassDef2>
          <!-- Class1Count=1 -->
          <!-- Class2Count=2 -->
          <Class1Record index="0">
            <Class2Record index="0">
              <Value1 XAdvance="0"/>
            </Class2Record>
            <Class2Record index="1">
              <Value1 XAdvance="-51"/>
            </Class2Record>
          </Class1Record>
        </PairPos>
      </Lookup>
    </LookupList>
  </GPOS>

</ttFont>
